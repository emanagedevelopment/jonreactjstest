{"version":3,"sources":["components/Search/Search.js","components/Artist/Artist.js","components/Results/Results.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","react_default","a","createElement","onSubmit","submitHandler","className","autocomplete","onChange","searchHandler","type","name","id","placeholder","role","aria-label","Artist","artist","artistResult","onClick","closeHandler","strArtist","target","rel","href","strWebsite","strTwitter","index_es","icon","faTwitter","strFacebook","faFacebook","src","strArtistBanner","alt","strStyle","strCountry","strBiographyEN","Results","searchInitiated","artistDiscog","components_Artist_Artist","console","log","App","state","artistSearch","event","newSearchTerm","value","_this","setState","e","preventDefault","artistData","discogData","artistURL","concat","discogURL","Object","assertThisInitialized","setTimeout","axios","get","then","result","data","artists","components_Search_Search","this","components_Results_Results","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.872b35ff.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Search = (props) =>Â {\r\n    return(\r\n        <form onSubmit={props.submitHandler} className=\"Search\">\r\n            <input \r\n                autocomplete=\"off\"\r\n                onChange={props.searchHandler} \r\n                type=\"text\" \r\n                name=\"artistSearchField\" \r\n                id=\"artistSearchField\"\r\n                placeholder=\"Enter an artist...\"\r\n                />\r\n            <button type=\"submit\"><span role=\"img\" aria-label=\"search\">&#128270;</span></button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport { faTwitter, faFacebook } from '@fortawesome/free-brands-svg-icons';\r\n\r\nconst Artist = (props) =>Â {\r\n    let artist = props.artistResult[0];\r\n    return(\r\n        <div className=\"ModalBG\">\r\n            <div className=\"Artist\">\r\n                <div onClick={props.closeHandler} className=\"closeButton\"></div>\r\n                <h1>{artist.strArtist}</h1>\r\n                <div className=\"social\">\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://' + artist.strWebsite} className=\"website\">\r\n\r\n                    </a>\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://' + artist.strTwitter} className=\"twitter\">\r\n                        <FontAwesomeIcon icon={faTwitter} />\r\n                    </a>\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://' + artist.strFacebook} className=\"facebook\">\r\n                        <FontAwesomeIcon icon={faFacebook} />\r\n                    </a>\r\n                </div>\r\n                <img className=\"banner\" src={artist.strArtistBanner} alt=\"\"/>\r\n                <div className=\"details\">\r\n                    <p><strong>Genre: </strong>{artist.strStyle}</p>\r\n                    <p><strong>From: </strong>{artist.strCountry}</p>\r\n                    <h3>Bio:</h3>\r\n                    <p>{artist.strBiographyEN}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Artist;","import React from 'react';\r\nimport Artist from '../Artist/Artist';\r\n\r\nconst Results = (props) =>Â {\r\n    let searchInitiated = props.searchInitiated;\r\n    let artistResult = props.artistResult;\r\n    let artistDiscog = props.artistDiscog;\r\n    let closeHandler = props.closeHandler;\r\n\r\n    if (searchInitiated && artistResult === null) {\r\n        return(\r\n            <p>Sorry, artist not found. <span role=\"img\" aria-label=\"OhShit\">ðŸ˜µ</span> Try searching another.</p>\r\n        );\r\n    }\r\n    if ( searchInitiated === true && artistResult != null) {\r\n        return(\r\n            <Artist\r\n                closeHandler={closeHandler}\r\n                artistResult={artistResult}\r\n\t\t\t\tartistDiscog={artistDiscog}\r\n            />\r\n        );\r\n    }\r\n    if ( searchInitiated === false ) {\r\n        return(\r\n            <p>Click <span role=\"img\" aria-label=\"search\">&#128270;</span>, or hit enter. <span role=\"img\" aria-label=\"CoolBro\">ðŸ˜Ž</span></p>\r\n        );\r\n    }\r\n    else {\r\n        console.log('Error in Results Component.')\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default Results;","import React, {\r\n\tComponent\r\n} from 'react';\r\nimport axios from 'axios';\r\nimport './App.scss';\r\nimport Search from './components/Search/Search';\r\nimport Results from './components/Results/Results';\r\n\r\nclass App extends Component {\r\n\r\n\tstate = {\r\n\t\tsearchInitiated: false,\r\n\t\tartistSearch: null,\r\n\t\tartistResult: null,\r\n\t\tartistDiscog: null,\r\n\t};\r\n\r\n\t// updates our state with the artist to search from user input\r\n\tsearchHandler = (event) => {\r\n\t\tconst newSearchTerm = event.target.value;\r\n\t\tthis.setState({\r\n\t\t\tartistSearch: newSearchTerm,\r\n\t\t});\r\n\t}\r\n\r\n\t// calls API and stores results in state\r\n\tsubmitHandler = e => {\r\n\t\te.preventDefault();\r\n\t\tconst artistSearch = this.state.artistSearch;\r\n\t\tconst artistURL = `https://theaudiodb.com/api/v1/json/195003/search.php?s=${artistSearch}`;\r\n\t\tconst discogURL = `https://theaudiodb.com/api/v1/json/195003/discography.php?s=${artistSearch}`;\r\n\t\tlet artistData;\r\n\t\tlet discogData;\r\n\t\tconst state = this;\r\n\r\n\t\tif ( artistSearch === null ) {\r\n\t\t\tconsole.log('You gotta type something dude...');\r\n\t\t\tthis.setState({\r\n\t\t\t\tsearchInitiated: true\r\n\t\t\t})\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tsearchInitiated: false\r\n\t\t\t\t})\r\n\t\t\t}, 5000);\r\n\t\t} else {\r\n\t\t\taxios.get(artistURL).then((result) => {\r\n\t\t\t\tartistData =  result.data.artists;\r\n\t\t\t\tstate.setState({\r\n\t\t\t\t\tsearchInitiated: true,\r\n\t\t\t\t\tartistResult: artistData\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\r\n\t\t\taxios.get(discogURL).then((result) => {\r\n\t\t\t\tdiscogData =  result.data;\r\n\t\t\t\tstate.setState({\r\n\t\t\t\t\tsearchInitiated: true,\r\n\t\t\t\t\tartistDiscog: discogData\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t}\r\n\t};\r\n\r\n\tcloseHandler = (e) => {\r\n\t\tthis.setState({\r\n\t\t\tsearchInitiated: false,\r\n\t\t\tartistResult: null,\r\n\t\t\tartistDiscog: null,\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn ( \r\n\t\t\t<div className = \"App\" >\r\n\t\t\t\t<h1>ARTISTA</h1>\r\n\t\t\t\t<Search searchHandler={this.searchHandler} submitHandler={this.submitHandler}/>\r\n\t\t\t\t<Results\r\n\t\t\t\t\tcloseHandler={this.closeHandler}\r\n\t\t\t\t\tsearchInitiated={this.state.searchInitiated}\r\n\t\t\t\t\tartistResult={this.state.artistResult}\r\n\t\t\t\t\tartistDiscog={this.state.artistDiscog}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}